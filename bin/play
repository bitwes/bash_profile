#!/usr/bin/env ruby

require 'pp'
require 'optparse'
require 'tty-cursor'

$banner  = "\
Description:
------------
This is a simple wrapper around afplay.  It allows you to cycle through all the
files in a directory and play them.  It's a quick and dirty tool.  It doesn't
like if you try to play a file that afplay doesn't like, so be careful.

Takes an optional filename argument to start playing.

Usage
-----
play [options] [filename]
\n"
$files = nil
$index = -1
$last_pid = nil
$cursor = TTY::Cursor
$playing_index = nil
$has_painted = false
$options = {
  show:10
}

# Parse command line options
def parse_options()
  options = {}

  optparse = OptionParser.new do|opts|
    opts.banner = $banner
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
    opts.on('-s', '--show [n]', "Tracks to display.  Default #{$options[:show]}") do |value|
      $options[:show] = value.to_i
    end
  end
  optparse.parse!

  return options
rescue OptionParser::MissingArgument
  puts optparse
  raise
end

def get_input
  begin
    system("stty raw -echo")
    str = STDIN.getc
  ensure
    system("stty -raw echo")
  end
  str.chr
end

def stop
  if($last_pid != nil)
    begin
      Process.kill("HUP", $last_pid)
      $last_pid = nil
    rescue Errno::ESRCH
      # We don't periodically check if the pid for the last play is around so
      # we just catch the error that the pid we created doesn't exist anymore.
    end
  end
  $playing_index = nil
  paint
end

def play_current
  stop
  $playing_index = $index
  $last_pid = spawn("afplay \"#{$files[$index]}\"")
  # detach the process so we can keep cycling through songs and getting input.
  # the stop method will try to kill the process if it still exists.
  Process.detach($last_pid)
  paint
end

def print_controls
  puts "f-forward  b-back  s-stop  p-play  q-quit"
  puts "-----------------------------------------"
end

def clear_screen
  # 4 for current line, now playihng and controls
  print $cursor.up(4 + $options[:show])
  # clear next 4 lines
  for i in 0..(3 + $options[:show])
    print $cursor.clear_line
    print $cursor.next_line
  end
  # move cursor back to top
  print $cursor.up(4 + $options[:show])
end

def print_file_list
  min = $index - ($options[:show] / 2).to_i
  if(min < 0)
    min = 0
  end

  max = min + $options[:show]

  for i in min..max do
    indicators = ['  ', '']

    if(i == $playing_index)
      indicators[0] = '* '
    end

    if(i == $index)
      indicators[0] = '>>'
      indicators[1] = '<<'
    end

    if(i < $files.length)
      puts "#{indicators[0]} #{i + 1}/#{$files.length}:  #{$files[i]} #{indicators[1]}"
    else
      puts "#{indicators[0]} --"
    end
  end
end

def paint
  playing = ''
  if($playing_index != nil)
    playing = $files[$playing_index]
  end

  # on first paint we can't clear the screen
  if($has_painted)
    clear_screen
  end
  $has_painted = true

  print_controls
  puts "playing:  #{playing}"
  print_file_list
end

# next is a keyword so named it nextf
def nextf
  $index += 1
  if($index >= $files.length)
    $index = $files.length - 1
  end
  paint
end

def previous
  $index -= 1
  if($index < 0)
    $index = 0
  end
  paint
end


def process_input
  i = get_input.downcase

  while(i != 'q')
    if(i == 'b')
      previous
    elsif(i == 'f')
      nextf
    elsif(i == 'p')
      play_current
    elsif(i == 's')
      stop
    end

    i = get_input.downcase
  end
  stop
end

def populate_files
  $files = Dir.entries('./')
  $files.delete('.')
  $files.delete('..')
end

def main
  parse_options
  populate_files

  if($options[:show] == 0 or $options[:show] > $files.length)
    $options[:show] = $files.length
  end

  # If a song was passed in then play it (if it exists).  Otherwise show
  # the first file (the nextf calls)
  if(ARGV.length > 0)
    if($files.index(ARGV[0]))
      $index = $files.index(ARGV[0])
      play_current
      paint
    else
      nextf
    end
  else
    nextf
  end

  process_input
  # puts so prompt is on next line
  puts
end

main
